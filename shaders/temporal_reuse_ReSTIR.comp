/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */
 
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#include "raycommon.glsl"



#define INV_PI 0.31831f




const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 2, rgba32f) uniform image2D colorImage;
layout(set = 0, binding = 3) readonly buffer _InstanceInfo {PrimMeshInfo primInfo[];};
layout(set = 0, binding = 4) readonly buffer ReSTIRDesc_ { ReSTIRDesc restirDesc; };




// See ReSTIRControl
layout(push_constant) uniform params_
{
  int   spp;
  int   ray_depth;
  float light_intensity;
  float light_color_X;
  float light_color_Y;
  float light_color_Z;
  int   randomize_color;
  int   light_type;
  int   two_sided_lights;
  int   frame_number;
  int   mode;
  int   GI_mode;
  int   M;
  int   num_neighbors;
  int   neighbor_radius;
};

#define BSDF_SAMPLING 1
#define DIRECT_LIGHT_SAMPLING 2
#define RIS_LIGHT_SAMPLING 3
#define RIS_TEMPORAL_LIGHT_SAMPLING 4
#define RIS_TEMPORAL_SPATIAL_LIGHT_SAMPLING 5
#define RIS_TEMPORAL_UNBIASED_SPATIAL_LIGHT_SAMPLING 6

#define AREA_LIGHT      0
#define POINT_LIGHT     1
#define MESH_LIGHT      2


bool TraceRayDirect(SceneBufferPointers scene_data, in vec3 origin, in vec3 direction, out Intersection isect) {
    rayQueryEXT rayQuery;

    uint flags = gl_RayFlagsOpaqueEXT;

    rayQueryInitializeEXT(rayQuery, topLevelAS, flags, 0xFF, origin, 0.01f, direction, 100);

    while(rayQueryProceedEXT(rayQuery)){}

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {

        isect.mesh_ID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true);
        isect.tri_ID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
        isect.t = rayQueryGetIntersectionTEXT(rayQuery, true);
        mat4x3 object_to_world = rayQueryGetIntersectionObjectToWorldEXT(rayQuery, true);
        mat4x3 world_to_object = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, true);

        vec2 ray_query_barys = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
        vec3 isect_barys = vec3(1.0f - ray_query_barys.x - ray_query_barys.y, ray_query_barys.x, ray_query_barys.y);

        PrimMeshInfo pInfo = primInfo[isect.mesh_ID];

        getTriangleIntersection(pInfo, scene_data, isect, isect_barys, object_to_world, world_to_object);

        return true;
    }
    else {

        isect.mesh_ID = -1;
        isect.tri_ID = -1;
        isect.t = -1.0f;
        isect.p = vec3(0.0f);
        isect.n = vec3(0.0f);
        return false;
    }
}

vec3 lightSample_BSDF(CoordinateSystem coordinate_system, SceneBufferPointers scene_data, vec3 R, vec3 wo, vec3 o, in vec3 light_color, in float light_intensity, inout uint rng_seed) {
    vec3 wi;
    float pdf;
    float cos_theta;
    vec3 f = sample_f_Diffuse_BRDF(coordinate_system, R, vec3(0,0,0), wi, pdf, cos_theta, rng_seed);

    Intersection isect;
    bool ray_hit_object = TraceRayDirect(scene_data, o, wi, isect);

    if (ray_hit_object) {
        PrimMeshInfo pInfo = primInfo[isect.mesh_ID];

        vec3 Le;
        if (light_type == AREA_LIGHT) {
            Le = Le_SquarePlaneDiffuseAreaLight(pInfo, scene_data, wi, two_sided_lights, randomize_color, light_color, light_intensity);
        }
        else if (light_type == MESH_LIGHT) {
            Le = Le_TriDiffuseAreaLight(pInfo, isect.tri_ID, scene_data, isect.p, wi, two_sided_lights, randomize_color, light_color, light_intensity);
        }
        else {
            Le = Le_PointLight(pInfo, scene_data, wi, o, isect.t, light_color, light_intensity);
        }

        if (length(Le) > 0.01f) {
            return Le * f * cos_theta / pdf;
        }
        else {
            return vec3(0.0f);
        }
    }
    else {
        return vec3(0.0f);
    }
}

vec3 lightSample_Direct_LTE(in CoordinateSystem coordinate_system, in SceneBufferPointers scene_data, in int light_ID, in vec3 R, in vec3 wo, in vec3 o, in int randomize_color, in vec3 light_color, in float light_intensity, out vec3 wi, out vec3 point_on_light, inout uint rng_seed) {
    // get its mesh ID
    int sampled_light_mesh_ID = scene_data.light_IDs.l[light_ID].mesh_ID;
    int sampled_light_tri_ID = scene_data.light_IDs.l[light_ID].tri_ID;

    // use the mesh ID to get access to its mesh data
    PrimMeshInfo pInfo = primInfo[sampled_light_mesh_ID];

    float pdf_L;
    vec3 Le;
    if (light_type == AREA_LIGHT) {
        Le = sample_Le_SquarePlaneDiffuseAreaLight(pInfo, scene_data, two_sided_lights, randomize_color, light_color, light_intensity, o, wi, pdf_L, point_on_light, rng_seed);
    }
    else if (light_type == MESH_LIGHT) {
        //int sampled_light_tri_ID = uniformSample1DIndex(rng_seed, pInfo.triCount);
        Le = sample_Le_TriDiffuseAreaLight(pInfo, sampled_light_tri_ID, scene_data, two_sided_lights, randomize_color, light_color, light_intensity, o, wi, pdf_L, point_on_light, rng_seed);
    }
    else {
        Le = sample_Le_PointLight(pInfo, scene_data, o, wi, pdf_L, point_on_light, light_color, light_intensity);
    }
    

    float cos_theta = abs(dot(wi, coordinate_system.normal));

    vec3 f = f_Diffuse_BRDF(R);

    return float(uni.num_lights) * Le * f * cos_theta / pdf_L;
}

vec3 lightSample_Direct_LTE_Calc(in CoordinateSystem coordinate_system, in SceneBufferPointers scene_data, in int light_ID, in vec3 R, in vec3 wo, in vec3 o, in vec3 wi, in vec3 point_on_light, in int randomize_color, in vec3 light_color, in float light_intensity, inout uint rng_seed) {
    // get its mesh ID
    int sampled_light_mesh_ID = scene_data.light_IDs.l[light_ID].mesh_ID;
    int sampled_light_tri_ID = scene_data.light_IDs.l[light_ID].tri_ID;

    // use the mesh ID to get access to its mesh data
    PrimMeshInfo pInfo = primInfo[sampled_light_mesh_ID];

    float pdf_L;
    vec3 Le;
    if (light_type == AREA_LIGHT) {
        Le = Le_SquarePlaneDiffuseAreaLight(pInfo, scene_data, wi, two_sided_lights, randomize_color, light_color, light_intensity);
        pdf_L = pdf_SquarePlaneDiffuseAreaLight(pInfo, scene_data, o, point_on_light);
    }
    else if (light_type == MESH_LIGHT) {
        Le = Le_TriDiffuseAreaLight(pInfo, sampled_light_tri_ID, scene_data, point_on_light, wi, two_sided_lights, randomize_color, light_color, light_intensity);
        pdf_L = pdf_TriDiffuseAreaLight(pInfo, sampled_light_tri_ID, scene_data, o, point_on_light);
    }
    else {
        Le = Le_PointLight(pInfo, scene_data, wi, o, length(point_on_light - o), light_color, light_intensity);
        pdf_L = 1.0f;
    }
    

    float cos_theta = abs(dot(wi, coordinate_system.normal));

    vec3 f = f_Diffuse_BRDF(R);

    return float(uni.num_lights) * Le * f * cos_theta / pdf_L;
}

vec3 lightSample_Direct(CoordinateSystem coordinate_system, SceneBufferPointers scene_data, vec3 R, vec3 wo, vec3 o, in int randomize_color, in vec3 light_color, in float light_intensity, inout uint rng_seed) {
    // pick a light to sample with a uniform random variable
    int sampled_light_ID = uniformSample1DIndex(rng_seed, uni.num_lights);

    vec3 wi;
    vec3 point_on_light;
    vec3 LTE = lightSample_Direct_LTE(coordinate_system, scene_data, sampled_light_ID, R, wo, o, randomize_color, light_color, light_intensity, wi, point_on_light, rng_seed);

    Intersection isect;
    bool ray_hit_object = TraceRayDirect(scene_data, o, wi, isect);

    if (ray_hit_object && isect.mesh_ID == scene_data.light_IDs.l[sampled_light_ID].mesh_ID && isect.tri_ID == scene_data.light_IDs.l[sampled_light_ID].tri_ID) {
        return LTE;
    }
    else {
        return vec3(0.0f);
    }
}

void lightSample_RIS_Gen(in CoordinateSystem coordinate_system, in SceneBufferPointers scene_data, inout Reservoir reservoir, in vec3 R, in vec3 wo, in vec3 o, in int randomize_color, in vec3 light_color, in float light_intensity, inout uint rng_seed) {
    for (int m = 0; m < M; ++m) {

        // pick a light to sample with a uniform random variable
        int mth_sampled_light_ID = uniformSample1DIndex(rng_seed, uni.num_lights);

        vec3 wi;
        vec3 point_on_light;
        vec3 LTE = lightSample_Direct_LTE(coordinate_system, scene_data, mth_sampled_light_ID, R, vec3(0.0f), o, randomize_color, light_color, light_intensity, wi, point_on_light, rng_seed);
        updateReservoir(reservoir, float(mth_sampled_light_ID), length(LTE), rnd(rng_seed), point_on_light);
            
    }
}

void main() {
    if (mode == BSDF_SAMPLING || mode == DIRECT_LIGHT_SAMPLING) {
        return;
    }

    ivec2 size = imageSize(inImage);

    if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) {
        return;
    }

    uint seed = tea(size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, 2 * frame_number);

    vec4 gBuffer = imageLoad(inImage, ivec2(gl_GlobalInvocationID.xy));
    vec4 colorBuffer = imageLoad(colorImage, ivec2(gl_GlobalInvocationID.xy));

    if (gBuffer == vec4(0)) {
        return;
    }

    else if (colorBuffer.w == 1.0f) {
        return;
    }


    TemporalToSpatialReservoirs temporal_to_spatial_reservoirs = TemporalToSpatialReservoirs(restirDesc.temporalToSpatialReservoirAddress);
    Reservoir temporal_to_spatial_reservoir;



    CoordinateSystem first_bounce_coord_sys = createCoordinateSystem(DecompressUnitVec(floatBitsToUint(gBuffer.w)));


    SceneBufferPointers scene_data = {  Materials(sceneDesc.materialAddress),
                                        Vertices(sceneDesc.vertexAddress),
                                        Indices(sceneDesc.indexAddress),
                                        Normals(sceneDesc.normalAddress),
                                        TexCoords(sceneDesc.uvAddress),
                                        LightIDs(sceneDesc.lightIDAddress)
                                     };
    


    if (mode == RIS_LIGHT_SAMPLING) {
        Reservoir reservoir = { 0, 0, 0, 0, vec3(0,0,0) };
        lightSample_RIS_Gen(first_bounce_coord_sys, scene_data, reservoir, colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);

        vec3 wi = normalize(reservoir.point_on_light - gBuffer.xyz);
        vec3 LTE = lightSample_Direct_LTE_Calc(first_bounce_coord_sys, scene_data, int(reservoir.sampled_light_ID), colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, wi, reservoir.point_on_light, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);


        float p_hat = length(LTE);
        
        if (p_hat == 0.0f) {
            reservoir.W = 0;
        }
        else {
            reservoir.W = (1.0 / max(p_hat, 0.00001)) * (reservoir.wsum / max(reservoir.M, 0.000001));
        }

        temporal_to_spatial_reservoirs.r_temp_to_spat[size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = reservoir;
    }

    else if (mode == RIS_TEMPORAL_LIGHT_SAMPLING || mode == RIS_TEMPORAL_SPATIAL_LIGHT_SAMPLING) {

    
        PreviousReservoirs previous_reservoirs = PreviousReservoirs(restirDesc.previousReservoirAddress);
        Reservoir previous_reservoir;


        
        if (frame_number > 0) {
            // pick reservoir based on previous pixel position
            vec4 previous_pixel_position = uniforms_restir.previous_viewProj * vec4(gBuffer.xyz, 1.0);
            previous_pixel_position /= previous_pixel_position.w;
            vec2 previous_pixel_coord = 0.5f * (previous_pixel_position.xy + 1.0f) * vec2(float(size.x), float(size.y));

            if ( previous_pixel_coord.x >= 0 &&  previous_pixel_coord.x < size.x &&  previous_pixel_coord.y >= 0 &&  previous_pixel_coord.y < size.y)
            {
                previous_reservoir = previous_reservoirs.r_prev[ int(previous_pixel_coord.y) * size.x + int(previous_pixel_coord.x)];
            }
            else {    
                Reservoir empty_reservoir = { 0, 0, 0, 0, vec3(0,0,0) };
                previous_reservoir = empty_reservoir;
            }

        }
        else {
            previous_reservoir = previous_reservoirs.r_prev[size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x];
        }
            

        Reservoir reservoir = { 0, 0, 0, 0, vec3(0,0,0) };
        lightSample_RIS_Gen(first_bounce_coord_sys, scene_data, reservoir, colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);

        vec3 wi = normalize(reservoir.point_on_light - gBuffer.xyz);
        vec3 LTE = lightSample_Direct_LTE_Calc(first_bounce_coord_sys, scene_data, int(reservoir.sampled_light_ID), colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, wi, reservoir.point_on_light, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);


        float p_hat = length(LTE);
        
        if (p_hat == 0) {
            reservoir.W = 0;
        }
        else {
            reservoir.W = (1.0f / max(p_hat, 0.00001)) * (reservoir.wsum / max(reservoir.M, 0.000001));
        }


        int sampled_light_mesh_ID = scene_data.light_IDs.l[int(reservoir.sampled_light_ID)].mesh_ID;
        int sampled_light_tri_ID = scene_data.light_IDs.l[int(reservoir.sampled_light_ID)].tri_ID;

        PrimMeshInfo pInfo = primInfo[sampled_light_mesh_ID];

        Tri isect_tri = getTriangleReal(pInfo, sampled_light_tri_ID, scene_data);

        vec3 world_space_normal = normalize(vec3(vec4(isect_tri.planar_normal, 0) * pInfo.world_to_object));

        Intersection isect;
        bool ray_hit_object = TraceRayDirect(scene_data, gBuffer.xyz, wi, isect);

        if (!ray_hit_object) {
            reservoir.W = 0;
        }
        if (isect.mesh_ID != sampled_light_mesh_ID) {
            reservoir.W = 0;
        }
        if (isect.tri_ID != sampled_light_tri_ID) {
            reservoir.W = 0;
        }
        if (light_type == AREA_LIGHT || light_type == MESH_LIGHT) {
            if (two_sided_lights == 0 && dot(wi, world_space_normal) > 0.0f) {
                reservoir.W = 0;
            }
        }

        Reservoir temporal_reservoir = { 0, 0, 0, 0, vec3(0,0,0) };

        updateReservoir(temporal_reservoir, reservoir.sampled_light_ID, p_hat * reservoir.W * reservoir.M, rnd(seed), reservoir.point_on_light);
           
        if (frame_number > 0) {
            if (previous_reservoir.M > 20 * reservoir.M)
            {
                previous_reservoir.wsum *= 20 * reservoir.M / previous_reservoir.M;
                previous_reservoir.M = 20 * reservoir.M;
            }



            vec3 wi = normalize(previous_reservoir.point_on_light - gBuffer.xyz);
            vec3 LTE = lightSample_Direct_LTE_Calc(first_bounce_coord_sys, scene_data, int(previous_reservoir.sampled_light_ID), colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, wi, previous_reservoir.point_on_light, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);

            p_hat = length(LTE);

            updateReservoir(temporal_reservoir, previous_reservoir.sampled_light_ID, p_hat * previous_reservoir.W * previous_reservoir.M, rnd(seed), previous_reservoir.point_on_light);
            
            wi = normalize(temporal_reservoir.point_on_light - gBuffer.xyz);
            LTE = lightSample_Direct_LTE_Calc(first_bounce_coord_sys, scene_data, int(temporal_reservoir.sampled_light_ID), colorBuffer.xyz, vec3(0.0f), gBuffer.xyz, wi, temporal_reservoir.point_on_light, randomize_color, vec3(light_color_X, light_color_Y, light_color_Z), light_intensity, seed);


            temporal_reservoir.M = reservoir.M + previous_reservoir.M;

            p_hat = length(LTE);
        
            if (p_hat == 0) {
                temporal_reservoir.W = 0;
            }
            else {
                temporal_reservoir.W = (temporal_reservoir.wsum / temporal_reservoir.M) / p_hat;
            }

            temporal_to_spatial_reservoirs.r_temp_to_spat[size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = temporal_reservoir;

        }
        else {
            temporal_reservoir = reservoir;
            temporal_to_spatial_reservoirs.r_temp_to_spat[size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = temporal_reservoir;
        }

    }
}